OVERVIEW:
This project contains a variant of the game Triple Triad. This project is currently not
fully implemented as it is lacking a controller to be able to actually play the game.

QUICK START:
TriosModel<ThreeTriosCard> model = new ThreeTriosModel();
ThreeTriosTextView view = new ThreeTriosTextView(model, System.out);
model.startGame(7, "test" + File.separator + "configs" + File.separator + "CardConfigSmall",
       "test" + File.separator + "configs" + File.separator + "separatedBoardConfigTest");
view.render();
model.playCard(1, 0, 0);
view.render();
model.playCard(1, 1, 0);
view.render();
To get started using this codebase, a user would first instantiate a ThreeTriosModel and
ThreeTriosTextView, which takes in the aforementioned model and an appendable object. Then,
a user would call the method startGame on the model to begin the game, passing in the number
of card cells and file paths to card and board files. Finally, the user would be able to view
the textview of the game by calling view.render(), and play cards to the grid using
model.playCard(), which takes in the 1-based index of the played card in the hand and
the 0-based row and column of the grid to which the card is played.

KEY COMPONENTS:
Both the model and view, ThreeTriosModel and ThreeTriosTextView, will be driven by a
controller in the future. The controller, after taking in user or AI inputs, will give
those inputs to the model which will update itself accordingly. Then, the controller
will drive the view to re-render the game, updating the output based on the model’s changes.

KEY SUBCOMPONENTS:
Within the model, a few key fields include the hands for the two players, the boards,
and the current turn. The hand for each playerColor is represented by a list of ThreeTriosCards
which is accessed throughout the model. There is a 2D array of Statuses and a List of
Lists of ThreeTriosCards representing the board. The Status array determines whether a board
space is empty, filled, or a whole, while the List of Lists holds the actual cards on the board.
The view holds an instance of the model in addition to an appendable representing output.

SOURCE ORGANIZATION:
Within the src folder in ThreeTrios, there are three directories named controller,
model, and view. The controller directory is currently empty, but will hold the
controller interface and class implementation once they’ve been created. This
directory is meant to handle direct interaction with the user or an AI playerColor. The
view directory holds the view interface and implementation of the text view. The view
interface will be later extended by a graphic view implementation, and this directory
is meant to oversee projection of the view to the user. The model package holds a
representation of the card and the model, classes to read card and board files, and
enums representing various objects in the game. Finally, aside from test classes, the
test folder holds an example class that demonstrates the functionality of the game and
a config directory that holds the files for board and card configurations. This directory
is only in the test folder as the files are only used in testing.

FUTURE AI IMPLEMENTATION:
To implement an AI playerColor in future versions of our project, we would allow the user
to choose whether they want to play with 2 players or vs. AI (or other modes such as AI
vs. AI). Then depending on their choice it would go to a gameplay loop. If they choose
to play with 2 real players the controller would repeatedly ask the users for input and
feed the input through the model using the playCard() method. After playcard is run it
will switch to the other playerColor and continue. For an AI implementation, it will perform
a similar loop but instead of switching from one playerColor to another it will ask a playerColor
for input, then run an algorithm to find the best move for the AI to make and input that
to the model using the same playCard() method. The model does not change its logic based
on whether or not one of the players is AI or not.


INVARIANT:
currentPlayer cannot be null, it must be either Player.RED or Player.BLUE. As it is
initialized in the constructor as Player.RED, and no methods have the ability to change
currentPlayer to anything but Player.RED or Player.BLUE, this statement is a class invariant.

CHANGES FOR PART THREE:
- Added the controller interfaces: ModelFeatures, PlayerActions, ViewFeatures, TriosController
- Added the controller implementations: ModelFeaturesImpl, ViewFeaturesImpl,
    PersonPlayer, ThreeTriosController,
- The ViewFeatures interface and implementation exist to listen to a ThreeTriosGUIView, its methods
    being called when certain events occur within the view itself
    The controller is then notified of these events so it can react accordingly.
- The ModelFeatures interface and implementation exist to listen to a three trios model, its
    methods being called whenever certain events occur within the model
    The controller is then notified of these events so it can react accordingly.
- The TriosController and implementation (ThreeTriosController) exist to handle user input, as
    altered by the ViewFeatures, and notify the respective classes so that they can update
    themselves accordingly
- The PlayerActions interface exists to represent all of the possible actions a player can take
    while playing a game of ThreeTrios, regardless of whether or not that player is a human
- The PersonPlayer class, which implements the PlayerActions interface, represents an implementation
    of all the possible actions a player can take as long as that player is an actual human being
    playing the game
- Added addFeatures methods to the model and view so they could register their respective
    ModelFeatures and ViewFeatures as listeners
    Additionally, the addFeatures method within the view handles the initialization of the
    mouse listener used to handle user input
- Due to the new implementation of features classes and the addFeatures method, the view no longer
    needed to make use of the custom mouse listener implementation MouseListenerGetCoords
- Changed the signature of playCard in the model as it needed to be refactored to take in the
    currently selected card instead of using a card from the internally stored hands



CHANGES FOR PART TWO:
- Implemented functionality to ensure that battle steps only occur between cards on opposite teams
- Added a few methods to ensure we had covered all recommended observations
- Added the GUI view class to create and update a graphic user interface view of the game
- Added the card cell class to represent a singular cell within the view, this cell can represent
    a hole, an empty space, or a filled space which has a card
- Added the board panel class to represent a singular panel within the view which holds
    and draws the grid and all corresponding cells
- Added the hand panel class to represent a panel which holds and draws the cards within a
    playerColor's hand, two of these panels are instantiated in the view to represent the hands for
    the red and blue players
- Added the TriosAI interface which represents a broad interface for the AI strategies
- Added the CornersTriosAI class which represents the strategy in which the AI goes for the corners
- Added the MaxFlipTriosAI class which represents the strategy in which the AI attempts to play a card
    to a space that allows it to flip as many cards on a turn as possible
- Added the Features interface which broadly represents the possible features surrounding user interaction
- Added the PreControllerFeatures class which represents the current pre-controller features including the printing
    of card and cell information to the console when cards are clicked
- Added two mocked models for testing which are used to test that the AI strategies are correctly moving through all
    of the cells that they should be observing
